/**
 * General message structures.
 */
syntax = "proto3";
package karps;

import "google/protobuf/any.proto";

import "types.proto";

/**
 * A computation sent to the backend.
 *
 * A computation is a unit of work for the backend. It corresponds to a single
 * graph (DAG) of operations to perform.
 *
 * All computations operate within a session, which is the unit of state in
 * the backend.
 *
 * A computation defines a list of terminal nodes. It is declared to be
 * completed when all the terminal nodes have been evaluated.
 *
 * If operations need to refer to results of previous operations, a special
 * pointer structure is provided.
 * 
 */
message Computation {
  /**
   * An identifier for this computation.
   * 
   * Each identifier must be unique. An error will be triggered if the
   * ID of this computation has been already seen within the scope of the
   * session.
   */
  string id = 2;

  /**
   * The compute nodes. They must form a DAG.
   */
  repeated Node nodes = 3;

  /**
   * The paths of the nodes that will be used to determine if the session has
   * finished.
   *
   * Note: these nodes must be observables (not datasets). An error is triggered
   * otherwise.
   *
   * Note: if the list is empty, no computation is performed.
   */
  repeated NodePath terminalNodes = 4;

  /**
   * TODO: remove
   */
  string collectingNode = 5;

  /**
   * TODO: remove
   */
  repeated string terminalNodeIds = 6;
}

/**
 * The locality of a compute node. This should be understood in the following
 * abstract sense.
 *
 * A local node is observable. Its content can be retrieved by the user (in the 
 * form of a Cell object). It is subject to caching. It can be
 * refered to in subsequent computations through a Pointer.
 *
 * A distributed node is not observable. Its content is not accessible.
 *
 * Karps may elicit to entirely remove distributed nodes
 * as part of the query planning. Karps may elicit to perform 'distributed'
 * operations as single-computer operations if it determines it is faster: the
 * notion of 'local' and 'distributed' is abstract in this context.
 *
 * Note: operations on grouped data
 */
enum NodeLocality {
  LOCAL = 0;
  DISTRIBUTED = 1;
}

/**
 * The path of a node from the root of the computation.
 * 
 * Each node in a computation is uniquely identified by a path, starting
 * from the computation object. The fact that it is a path in a tree
 * of nodes is entirely a user concept. For all practical matters, Karps
 * only assumes that each node is uniquely addressable.
 *
 * If two nodes in the same computation are found to share the same path, an
 * error is returned.
 *
 * The string in the path is assumed for now to only contain letters, digits, -
 * and _. Each name may not be empty. The list may not be empty.
 *
 * Note: the global path (that includes the session id and the computation id)
 * is a separate data structure.
 */
message NodePath {
  repeated string path = 1;
}

/**
 * A computation node. Each node corresponds to an operator in a graph of
 * computations.
 *
 * A node has a single output (unlike TensorFlow for example), which is either
 * 'local' or 'distributed' (see the discussion in NodeLocality).
 */
message Node {
  /**
   * The locality of the output.
   */
  NodeLocality locality = 1;

  /**
   * The path of this node in the computation.
   */
  NodePath path = 2;

  /**
   * The name of the operator.
   *
   * It is customary to use the java class convention when defining an operator.
   * For example, all the standard Karps operators in defined in the
   * `org.spark` and `org.karps` namespace: `org.spark.LocalLiteral`, etc.
   */
  string op_name = 3;

  /**
   * Some extra information that is necessary for the operator to work. This
   * field is optional.
   *
   * For example, the extra values required by the operators in the standard
   * library are defined in `op.proto`.
   */
  google.protobuf.Any op_extra = 4;

  /**
   * (optional) The dependencies of this operator. These nodes must be part of
   * the
   * computation, and cannot form a cycle. An error is raised otherwise.
   *
   * This list may be empty or absent.
   */
  repeated NodePath parents = 5;

  /**
   * Extra dependencies that are not required by the operator to work, but that
   * will be checked for completion before working on this operator.
   *
   * This is useful when strictly ordering operators that work as side effects,
   * or to schedule computations at different times.
   *
   * If provided, Karps will always honor this ordering and not attempt to
   * optimize it away.
   */
  repeated NodePath logical_dependencies = 6;

  /**
   * (optional) The data type of the value (for observable) or of the value (for
   * datasets).

   * This type is not required, but it is useful to confirm that the type
   * computed by the fronted corresponds to what the backend is going to 
   * produce.
   */
  DataType validation_type = 100;
}


// ------ Status messages ---------

/**
 * The status of a node.
 * 
 * The status can be requested for both observables and datasets. However,
 * in the case of datasets, success and failure may never be returned (only
 * the start of the computation is registered).
 *
 * Due to the optimizations performed by the query planner, requesting the
 * status of a dataset may be meaningless (this operator may be entirely 
 * optimized away by the planner).
 */
message NodeStatus {
  oneof status {
    NodeComputationSuccess success = 1;
    NodeComputationFailure failure = 2;
    NodeQueued queued = 3;
    NodeRunning running = 4;
  }
}

/**
 * The computation of this node has finished with a success.
 * 
 * If requested, the content of this node is also returned.
 */
message NodeComputationSuccess {
  /**
   * The data type of the content.
   */
  DataType data_type = 1;
  /**
   * (optional) Returned if the node is an observable and if contents is
   * requested.
   */
  Cell value = 2;
}

/**
 * The computation of this node has finished with a failure.
 * 
 * All children of this node will also be marked as failure (not logical ones).
 *
 * Note that the backend should not cache failures.
 */
message NodeComputationFailure {
  string message = 1;
}

/**
 * The node has been received and is awaiting processing.
 */
message NodeQueued {
  
}

/**
 * The node has been scheduled to run by the backend.
 */
message NodeRunning {
  
}
